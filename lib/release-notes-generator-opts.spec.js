'use strict'

const { Readable, Writable } = require('stream')
/* eslint-disable import/no-extraneous-dependencies */
const conventionalChangelogWriter = require('conventional-changelog-writer')

const { writerOpts } = require('./release-notes-generator-opts')

/** Generate a context with overrides */
const gnContext = (overrides) => ({
  version: '1.3.0',
  currentTag: 'v1.3.0',
  previousTag: 'v1.2.0',
  host: 'https://github.com',
  owner: 'crystal-ball',
  repository: 'semantic-release-base',
  commit: 'commit',
  issue: 'issues',
  linkCompare: true,
  linkReferences: true,
  isPatch: false,
  date: '2019-05-26', // Normally autogenerated but passed here for snapshots
  ...overrides,
})

/** Generate a commit with overrides */
const gnCommit = ({
  tag = 'New',
  message = 'Hecka rad test message',
  notes = [],
  references = [],
} = {}) => ({
  header: `${tag}: ${message}`,
  tag,
  message,
  hash: '8d14946c50464dcf99cf5a9bd701262b2e3a2b4a',
  notes,
  references,
})

/**
 * Utility fn will create and pipe streams for creating a set of release notes
 * with the conventional-changelog-writer and this package's configs
 */
const generateReleaseNotes = (context, commits) =>
  new Promise((resolve) => {
    let releaseNotes = ''
    class MyWritable extends Writable {
      // eslint-disable-next-line class-methods-use-this, no-underscore-dangle
      _write(chunk, _, callback) {
        releaseNotes += chunk.toString()
        callback()
      }
    }

    const commitsStream = new Readable()
    commits.forEach((commit) => {
      commitsStream.push(JSON.stringify(commit))
    })
    commitsStream.push(null)

    commitsStream
      .pipe(conventionalChangelogWriter(context, writerOpts))
      .pipe(new MyWritable())

    commitsStream.on('end', () => {
      resolve(releaseNotes)
    })
  })

describe('Changelog writer configs', () => {
  test('All release notes features are rendered correctly', async () => {
    // Create a single release that should have an example of every major feature
    const releaseNotes = await generateReleaseNotes(gnContext(), [
      gnCommit({
        tag: 'Fix',
        message: 'Fixing broken assertion in test',
        references: [{ issue: '75' }],
      }),
      gnCommit({
        tag: 'Fix',
        message: 'Fixing broken assertion in test',
        references: [{ owner: 'cool-org', repository: 'cool-package', issue: '75' }],
      }),
      gnCommit({
        tag: 'Fix',
        message: 'Fixed a lot of broken things in this release',
        references: [{ issue: '100' }],
      }),
      gnCommit({ tag: 'Docs', message: 'Added docs on config overrides' }),
      gnCommit({ tag: 'Docs', message: 'Add Roadmap tasks for release notes' }),
      gnCommit({ tag: 'Build', message: 'Update Github Actions config' }),
      gnCommit({ tag: 'Upgrade', message: 'ESLint to latest' }),
      gnCommit({
        tag: 'New',
        message: 'Added a new feature that is rad',
        references: [{ issue: '80' }],
      }),
      gnCommit({
        tag: 'Update',
        message: 'Added additional overrides to config generator.',
        references: [{ issue: '99' }],
      }),
    ])
    expect(releaseNotes).toMatchSnapshot()
  })
})
